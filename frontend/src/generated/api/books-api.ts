/* tslint:disable */
/* eslint-disable */
/**
 * lms
 * lms API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Book } from '../models';
// @ts-ignore
import { BookCreate } from '../models';
// @ts-ignore
import { BookUpdate } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
/**
 * BooksApi - axios parameter creator
 * @export
 */
export const BooksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Book
         * @param {BookCreate} bookCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBook: async (bookCreate: BookCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookCreate' is not null or undefined
            assertParamExists('createBook', 'bookCreate', bookCreate)
            const localVarPath = `/api/v1/books`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Book
         * @param {number} bookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBook: async (bookId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookId' is not null or undefined
            assertParamExists('deleteBook', 'bookId', bookId)
            const localVarPath = `/api/v1/books/{book_id}`
                .replace(`{${"book_id"}}`, encodeURIComponent(String(bookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Book
         * @param {number} bookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBook: async (bookId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookId' is not null or undefined
            assertParamExists('getBook', 'bookId', bookId)
            const localVarPath = `/api/v1/books/{book_id}`
                .replace(`{${"book_id"}}`, encodeURIComponent(String(bookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Books
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBooks: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/books`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Book
         * @param {number} bookId 
         * @param {BookUpdate} bookUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBook: async (bookId: number, bookUpdate: BookUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookId' is not null or undefined
            assertParamExists('updateBook', 'bookId', bookId)
            // verify required parameter 'bookUpdate' is not null or undefined
            assertParamExists('updateBook', 'bookUpdate', bookUpdate)
            const localVarPath = `/api/v1/books/{book_id}`
                .replace(`{${"book_id"}}`, encodeURIComponent(String(bookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BooksApi - functional programming interface
 * @export
 */
export const BooksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BooksApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Book
         * @param {BookCreate} bookCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBook(bookCreate: BookCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Book>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBook(bookCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Book
         * @param {number} bookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBook(bookId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBook(bookId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Book
         * @param {number} bookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBook(bookId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Book>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBook(bookId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Books
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBooks(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Book>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBooks(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Book
         * @param {number} bookId 
         * @param {BookUpdate} bookUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBook(bookId: number, bookUpdate: BookUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Book>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBook(bookId, bookUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BooksApi - factory interface
 * @export
 */
export const BooksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BooksApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Book
         * @param {BookCreate} bookCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBook(bookCreate: BookCreate, options?: any): AxiosPromise<Book> {
            return localVarFp.createBook(bookCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Book
         * @param {number} bookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBook(bookId: number, options?: any): AxiosPromise<any> {
            return localVarFp.deleteBook(bookId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Book
         * @param {number} bookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBook(bookId: number, options?: any): AxiosPromise<Book> {
            return localVarFp.getBook(bookId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Books
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBooks(options?: any): AxiosPromise<Array<Book>> {
            return localVarFp.getBooks(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Book
         * @param {number} bookId 
         * @param {BookUpdate} bookUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBook(bookId: number, bookUpdate: BookUpdate, options?: any): AxiosPromise<Book> {
            return localVarFp.updateBook(bookId, bookUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createBook operation in BooksApi.
 * @export
 * @interface BooksApiCreateBookRequest
 */
export interface BooksApiCreateBookRequest {
    /**
     * 
     * @type {BookCreate}
     * @memberof BooksApiCreateBook
     */
    readonly bookCreate: BookCreate
}

/**
 * Request parameters for deleteBook operation in BooksApi.
 * @export
 * @interface BooksApiDeleteBookRequest
 */
export interface BooksApiDeleteBookRequest {
    /**
     * 
     * @type {number}
     * @memberof BooksApiDeleteBook
     */
    readonly bookId: number
}

/**
 * Request parameters for getBook operation in BooksApi.
 * @export
 * @interface BooksApiGetBookRequest
 */
export interface BooksApiGetBookRequest {
    /**
     * 
     * @type {number}
     * @memberof BooksApiGetBook
     */
    readonly bookId: number
}

/**
 * Request parameters for updateBook operation in BooksApi.
 * @export
 * @interface BooksApiUpdateBookRequest
 */
export interface BooksApiUpdateBookRequest {
    /**
     * 
     * @type {number}
     * @memberof BooksApiUpdateBook
     */
    readonly bookId: number

    /**
     * 
     * @type {BookUpdate}
     * @memberof BooksApiUpdateBook
     */
    readonly bookUpdate: BookUpdate
}

/**
 * BooksApi - object-oriented interface
 * @export
 * @class BooksApi
 * @extends {BaseAPI}
 */
export class BooksApi extends BaseAPI {
    /**
     * 
     * @summary Create Book
     * @param {BooksApiCreateBookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApi
     */
    public createBook(requestParameters: BooksApiCreateBookRequest, options?: AxiosRequestConfig) {
        return BooksApiFp(this.configuration).createBook(requestParameters.bookCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Book
     * @param {BooksApiDeleteBookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApi
     */
    public deleteBook(requestParameters: BooksApiDeleteBookRequest, options?: AxiosRequestConfig) {
        return BooksApiFp(this.configuration).deleteBook(requestParameters.bookId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Book
     * @param {BooksApiGetBookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApi
     */
    public getBook(requestParameters: BooksApiGetBookRequest, options?: AxiosRequestConfig) {
        return BooksApiFp(this.configuration).getBook(requestParameters.bookId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Books
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApi
     */
    public getBooks(options?: AxiosRequestConfig) {
        return BooksApiFp(this.configuration).getBooks(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Book
     * @param {BooksApiUpdateBookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BooksApi
     */
    public updateBook(requestParameters: BooksApiUpdateBookRequest, options?: AxiosRequestConfig) {
        return BooksApiFp(this.configuration).updateBook(requestParameters.bookId, requestParameters.bookUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}
