/* tslint:disable */
/* eslint-disable */
/**
 * lms
 * lms API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { Library } from '../models';
// @ts-ignore
import { LibraryCreate } from '../models';
// @ts-ignore
import { LibraryUpdate } from '../models';
/**
 * LibrariesApi - axios parameter creator
 * @export
 */
export const LibrariesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Library
         * @param {LibraryCreate} libraryCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLibrary: async (libraryCreate: LibraryCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'libraryCreate' is not null or undefined
            assertParamExists('createLibrary', 'libraryCreate', libraryCreate)
            const localVarPath = `/api/v1/libraries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(libraryCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Library
         * @param {number} libraryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLibrary: async (libraryId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'libraryId' is not null or undefined
            assertParamExists('deleteLibrary', 'libraryId', libraryId)
            const localVarPath = `/api/v1/libraries/{library_id}`
                .replace(`{${"library_id"}}`, encodeURIComponent(String(libraryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Libraries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLibraries: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/libraries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Library
         * @param {number} libraryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLibrary: async (libraryId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'libraryId' is not null or undefined
            assertParamExists('getLibrary', 'libraryId', libraryId)
            const localVarPath = `/api/v1/libraries/{library_id}`
                .replace(`{${"library_id"}}`, encodeURIComponent(String(libraryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Library
         * @param {number} libraryId 
         * @param {LibraryUpdate} libraryUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLibrary: async (libraryId: number, libraryUpdate: LibraryUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'libraryId' is not null or undefined
            assertParamExists('updateLibrary', 'libraryId', libraryId)
            // verify required parameter 'libraryUpdate' is not null or undefined
            assertParamExists('updateLibrary', 'libraryUpdate', libraryUpdate)
            const localVarPath = `/api/v1/libraries/{library_id}`
                .replace(`{${"library_id"}}`, encodeURIComponent(String(libraryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(libraryUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LibrariesApi - functional programming interface
 * @export
 */
export const LibrariesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LibrariesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Library
         * @param {LibraryCreate} libraryCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLibrary(libraryCreate: LibraryCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Library>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLibrary(libraryCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Library
         * @param {number} libraryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLibrary(libraryId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLibrary(libraryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Libraries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLibraries(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Library>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLibraries(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Library
         * @param {number} libraryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLibrary(libraryId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Library>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLibrary(libraryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Library
         * @param {number} libraryId 
         * @param {LibraryUpdate} libraryUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLibrary(libraryId: number, libraryUpdate: LibraryUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Library>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLibrary(libraryId, libraryUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LibrariesApi - factory interface
 * @export
 */
export const LibrariesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LibrariesApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Library
         * @param {LibraryCreate} libraryCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLibrary(libraryCreate: LibraryCreate, options?: any): AxiosPromise<Library> {
            return localVarFp.createLibrary(libraryCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Library
         * @param {number} libraryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLibrary(libraryId: number, options?: any): AxiosPromise<any> {
            return localVarFp.deleteLibrary(libraryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Libraries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLibraries(options?: any): AxiosPromise<Array<Library>> {
            return localVarFp.getLibraries(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Library
         * @param {number} libraryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLibrary(libraryId: number, options?: any): AxiosPromise<Library> {
            return localVarFp.getLibrary(libraryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Library
         * @param {number} libraryId 
         * @param {LibraryUpdate} libraryUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLibrary(libraryId: number, libraryUpdate: LibraryUpdate, options?: any): AxiosPromise<Library> {
            return localVarFp.updateLibrary(libraryId, libraryUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createLibrary operation in LibrariesApi.
 * @export
 * @interface LibrariesApiCreateLibraryRequest
 */
export interface LibrariesApiCreateLibraryRequest {
    /**
     * 
     * @type {LibraryCreate}
     * @memberof LibrariesApiCreateLibrary
     */
    readonly libraryCreate: LibraryCreate
}

/**
 * Request parameters for deleteLibrary operation in LibrariesApi.
 * @export
 * @interface LibrariesApiDeleteLibraryRequest
 */
export interface LibrariesApiDeleteLibraryRequest {
    /**
     * 
     * @type {number}
     * @memberof LibrariesApiDeleteLibrary
     */
    readonly libraryId: number
}

/**
 * Request parameters for getLibrary operation in LibrariesApi.
 * @export
 * @interface LibrariesApiGetLibraryRequest
 */
export interface LibrariesApiGetLibraryRequest {
    /**
     * 
     * @type {number}
     * @memberof LibrariesApiGetLibrary
     */
    readonly libraryId: number
}

/**
 * Request parameters for updateLibrary operation in LibrariesApi.
 * @export
 * @interface LibrariesApiUpdateLibraryRequest
 */
export interface LibrariesApiUpdateLibraryRequest {
    /**
     * 
     * @type {number}
     * @memberof LibrariesApiUpdateLibrary
     */
    readonly libraryId: number

    /**
     * 
     * @type {LibraryUpdate}
     * @memberof LibrariesApiUpdateLibrary
     */
    readonly libraryUpdate: LibraryUpdate
}

/**
 * LibrariesApi - object-oriented interface
 * @export
 * @class LibrariesApi
 * @extends {BaseAPI}
 */
export class LibrariesApi extends BaseAPI {
    /**
     * 
     * @summary Create Library
     * @param {LibrariesApiCreateLibraryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibrariesApi
     */
    public createLibrary(requestParameters: LibrariesApiCreateLibraryRequest, options?: AxiosRequestConfig) {
        return LibrariesApiFp(this.configuration).createLibrary(requestParameters.libraryCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Library
     * @param {LibrariesApiDeleteLibraryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibrariesApi
     */
    public deleteLibrary(requestParameters: LibrariesApiDeleteLibraryRequest, options?: AxiosRequestConfig) {
        return LibrariesApiFp(this.configuration).deleteLibrary(requestParameters.libraryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Libraries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibrariesApi
     */
    public getLibraries(options?: AxiosRequestConfig) {
        return LibrariesApiFp(this.configuration).getLibraries(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Library
     * @param {LibrariesApiGetLibraryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibrariesApi
     */
    public getLibrary(requestParameters: LibrariesApiGetLibraryRequest, options?: AxiosRequestConfig) {
        return LibrariesApiFp(this.configuration).getLibrary(requestParameters.libraryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Library
     * @param {LibrariesApiUpdateLibraryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibrariesApi
     */
    public updateLibrary(requestParameters: LibrariesApiUpdateLibraryRequest, options?: AxiosRequestConfig) {
        return LibrariesApiFp(this.configuration).updateLibrary(requestParameters.libraryId, requestParameters.libraryUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}
