/* tslint:disable */
/* eslint-disable */
/**
 * lms
 * lms API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { Transaction } from '../models';
// @ts-ignore
import { TransactionCreate } from '../models';
// @ts-ignore
import { TransactionUpdate } from '../models';
/**
 * TransactionsApi - axios parameter creator
 * @export
 */
export const TransactionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Transaction
         * @param {TransactionCreate} transactionCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTransaction: async (transactionCreate: TransactionCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionCreate' is not null or undefined
            assertParamExists('createTransaction', 'transactionCreate', transactionCreate)
            const localVarPath = `/api/v1/transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transactionCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Transaction
         * @param {number} transactionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTransaction: async (transactionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionId' is not null or undefined
            assertParamExists('deleteTransaction', 'transactionId', transactionId)
            const localVarPath = `/api/v1/transactions/{transaction_id}`
                .replace(`{${"transaction_id"}}`, encodeURIComponent(String(transactionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Transaction
         * @param {number} transactionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransaction: async (transactionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionId' is not null or undefined
            assertParamExists('getTransaction', 'transactionId', transactionId)
            const localVarPath = `/api/v1/transactions/{transaction_id}`
                .replace(`{${"transaction_id"}}`, encodeURIComponent(String(transactionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Transactions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactions: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Transaction
         * @param {number} transactionId 
         * @param {TransactionUpdate} transactionUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTransaction: async (transactionId: number, transactionUpdate: TransactionUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionId' is not null or undefined
            assertParamExists('updateTransaction', 'transactionId', transactionId)
            // verify required parameter 'transactionUpdate' is not null or undefined
            assertParamExists('updateTransaction', 'transactionUpdate', transactionUpdate)
            const localVarPath = `/api/v1/transactions/{transaction_id}`
                .replace(`{${"transaction_id"}}`, encodeURIComponent(String(transactionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transactionUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TransactionsApi - functional programming interface
 * @export
 */
export const TransactionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TransactionsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Transaction
         * @param {TransactionCreate} transactionCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTransaction(transactionCreate: TransactionCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTransaction(transactionCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Transaction
         * @param {number} transactionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTransaction(transactionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTransaction(transactionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Transaction
         * @param {number} transactionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransaction(transactionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTransaction(transactionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Transactions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransactions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Transaction>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTransactions(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Transaction
         * @param {number} transactionId 
         * @param {TransactionUpdate} transactionUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTransaction(transactionId: number, transactionUpdate: TransactionUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTransaction(transactionId, transactionUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TransactionsApi - factory interface
 * @export
 */
export const TransactionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TransactionsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Transaction
         * @param {TransactionCreate} transactionCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTransaction(transactionCreate: TransactionCreate, options?: any): AxiosPromise<Transaction> {
            return localVarFp.createTransaction(transactionCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Transaction
         * @param {number} transactionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTransaction(transactionId: number, options?: any): AxiosPromise<any> {
            return localVarFp.deleteTransaction(transactionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Transaction
         * @param {number} transactionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransaction(transactionId: number, options?: any): AxiosPromise<Transaction> {
            return localVarFp.getTransaction(transactionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Transactions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactions(options?: any): AxiosPromise<Array<Transaction>> {
            return localVarFp.getTransactions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Transaction
         * @param {number} transactionId 
         * @param {TransactionUpdate} transactionUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTransaction(transactionId: number, transactionUpdate: TransactionUpdate, options?: any): AxiosPromise<Transaction> {
            return localVarFp.updateTransaction(transactionId, transactionUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createTransaction operation in TransactionsApi.
 * @export
 * @interface TransactionsApiCreateTransactionRequest
 */
export interface TransactionsApiCreateTransactionRequest {
    /**
     * 
     * @type {TransactionCreate}
     * @memberof TransactionsApiCreateTransaction
     */
    readonly transactionCreate: TransactionCreate
}

/**
 * Request parameters for deleteTransaction operation in TransactionsApi.
 * @export
 * @interface TransactionsApiDeleteTransactionRequest
 */
export interface TransactionsApiDeleteTransactionRequest {
    /**
     * 
     * @type {number}
     * @memberof TransactionsApiDeleteTransaction
     */
    readonly transactionId: number
}

/**
 * Request parameters for getTransaction operation in TransactionsApi.
 * @export
 * @interface TransactionsApiGetTransactionRequest
 */
export interface TransactionsApiGetTransactionRequest {
    /**
     * 
     * @type {number}
     * @memberof TransactionsApiGetTransaction
     */
    readonly transactionId: number
}

/**
 * Request parameters for updateTransaction operation in TransactionsApi.
 * @export
 * @interface TransactionsApiUpdateTransactionRequest
 */
export interface TransactionsApiUpdateTransactionRequest {
    /**
     * 
     * @type {number}
     * @memberof TransactionsApiUpdateTransaction
     */
    readonly transactionId: number

    /**
     * 
     * @type {TransactionUpdate}
     * @memberof TransactionsApiUpdateTransaction
     */
    readonly transactionUpdate: TransactionUpdate
}

/**
 * TransactionsApi - object-oriented interface
 * @export
 * @class TransactionsApi
 * @extends {BaseAPI}
 */
export class TransactionsApi extends BaseAPI {
    /**
     * 
     * @summary Create Transaction
     * @param {TransactionsApiCreateTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    public createTransaction(requestParameters: TransactionsApiCreateTransactionRequest, options?: AxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).createTransaction(requestParameters.transactionCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Transaction
     * @param {TransactionsApiDeleteTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    public deleteTransaction(requestParameters: TransactionsApiDeleteTransactionRequest, options?: AxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).deleteTransaction(requestParameters.transactionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Transaction
     * @param {TransactionsApiGetTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    public getTransaction(requestParameters: TransactionsApiGetTransactionRequest, options?: AxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).getTransaction(requestParameters.transactionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Transactions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    public getTransactions(options?: AxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).getTransactions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Transaction
     * @param {TransactionsApiUpdateTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    public updateTransaction(requestParameters: TransactionsApiUpdateTransactionRequest, options?: AxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).updateTransaction(requestParameters.transactionId, requestParameters.transactionUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}
